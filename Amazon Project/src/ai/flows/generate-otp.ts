// This file is generated by Gemini, do not edit!
'use server';
/**
 * @fileOverview Generates a secure OTP for coin transactions using AI.
 *
 * - generateOtp - A function that generates a secure OTP.
 * - GenerateOtpInput - The input type for the generateOtp function.
 * - GenerateOtpOutput - The return type for the generateOtp function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateOtpInputSchema = z.object({
  transactionId: z.string().describe('The unique identifier for the transaction.'),
  senderId: z.string().describe('The unique identifier (e.g., email or UPI ID) for the sender.'),
  receiverId: z.string().describe('The unique UPI ID for the receiver.'), // Updated description
  amount: z.number().describe('The amount of coins to be transferred.'),
});
export type GenerateOtpInput = z.infer<typeof GenerateOtpInputSchema>;

const GenerateOtpOutputSchema = z.object({
  otp: z.string().describe('The one-time password (OTP) generated for the transaction.'),
});
export type GenerateOtpOutput = z.infer<typeof GenerateOtpOutputSchema>;

export async function generateOtp(input: GenerateOtpInput): Promise<GenerateOtpOutput> {
  return generateOtpFlow(input);
}

const generateOtpPrompt = ai.definePrompt({
  name: 'generateOtpPrompt',
  input: {schema: GenerateOtpInputSchema},
  output: {schema: GenerateOtpOutputSchema},
  prompt: `You are a security expert specializing in generating secure one-time passwords (OTPs) for coin transactions.

  Generate a unique, strong, and unpredictable OTP for the following transaction. The OTP should be a 6-digit number.

  Transaction ID: {{{transactionId}}}
  Sender ID: {{{senderId}}}
  Receiver UPI ID: {{{receiverId}}}
  Amount: {{{amount}}}

  Ensure that the OTP is highly resistant to cracking and cannot be easily guessed.
  Return ONLY the OTP. Do not add any other texts.`,
});

const generateOtpFlow = ai.defineFlow(
  {
    name: 'generateOtpFlow',
    inputSchema: GenerateOtpInputSchema,
    outputSchema: GenerateOtpOutputSchema,
  },
  async input => {
    const {output} = await generateOtpPrompt(input);
    return output!;
  }
);
