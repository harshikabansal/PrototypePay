import 'package:sqflite/sqflite.dart';
import 'package:path/path.dart';
import 'package:coinsend/models/transaction.dart';

class LocalDatabase {
  static const _dbVersion = 1;
  static const _dbName = 'coinsend.db';

  static Database? _database;

  Future<Database> get database async {
    if (_database != null) return _database!;
    _database = await _initDatabase();
    return _database!;
  }

  Future<Database> _initDatabase() async {
    final path = join(await getDatabasesPath(), _dbName);
    return openDatabase(
      path,
      version: _dbVersion,
      onCreate: (db, version) async {
        await db.execute('''
          CREATE TABLE transactions(
            id TEXT PRIMARY KEY,
            sender TEXT,
            receiver TEXT,
            amount REAL,
            otp TEXT,
            status TEXT,
            timestamp INTEGER,
            isPending INTEGER
          )
        ''');
        await db.execute('''
          CREATE TABLE wallet(
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            balance REAL DEFAULT 0.0
          )
        ''');
        await db.insert('wallet', {'balance': 0.0});
      },
    );
  }

  Future<double> getBalance() async {
    final db = await database;
    final result = await db.query('wallet');
    return result.isNotEmpty ? result.first['balance'] as double : 0.0;
  }

  Future<void> updateBalance(double newBalance) async {
    final db = await database;
    await db.update('wallet', {'balance': newBalance});
  }

  Future<void> addTransaction(Transaction transaction) async {
    final db = await database;
    await db.insert('transactions', transaction.toMap());
  }

  Future<List<Transaction>> getTransactions() async {
    final db = await database;
    final maps = await db.query('transactions');
    return List.generate(maps.length, (i) => Transaction.fromMap(maps[i]));
  }
}
