import 'package:workmanager/workmanager.dart';
import 'package:coinsend/data/local/database.dart';
import 'package:coinsend/data/remote/api_service.dart';

class SyncService {
  static void initialize() {
    Workmanager().initialize(callbackDispatcher, isInDebugMode: false);
  }

  static void callbackDispatcher() {
    Workmanager().executeTask((taskName, inputData) async {
      switch (taskName) {
        case 'transactionSync':
          await _syncTransaction(inputData);
          break;
        case 'balanceSync':
          await _syncBalance();
          break;
      }
      return Future.value(true);
    });
  }

  static Future<void> _syncTransaction(Map<String, dynamic> data) async {
    try {
      await ApiService.syncTransaction(data);
      await LocalDatabase().updateTransactionStatus(data['txId'], 'completed');
    } catch (e) {
      // Exponential backoff retry
      final nextRun = DateTime.now().add(const Duration(minutes: 5));
      Workmanager().registerOneOffTask(
        "retry_${data['txId']}",
        "transactionSync",
        inputData: data,
        initialDelay: const Duration(minutes: 5),
      );
    }
  }

  static Future<void> _syncBalance() async {
    try {
      // Implementation to sync balance with server
    } catch (e) {
      Workmanager().registerOneOffTask(
        "balanceSyncRetry",
        "balanceSync",
        initialDelay: const Duration(minutes: 10),
      );
    }
  }

  static void queueTransaction(Map<String, dynamic> txData) {
    Workmanager().registerOneOffTask(
      "tx_${txData['txId']}",
      "transactionSync",
      inputData: txData,
      constraints: Constraints(networkType: NetworkType.connected),
    );
  }
}
