import 'package:flutter/material.dart';
import 'package:flutter_blue_plus/flutter_blue_plus.dart';
import 'package:coinsend/features/bluetooth/ble_service.dart';
import 'package:coinsend/features/auth/pin_verification.dart';
import 'package:coinsend/models/transaction.dart';
import 'package:coinsend/features/wallet/wallet_service.dart';

class ReceiverScreen extends StatefulWidget {
  const ReceiverScreen({super.key});

  @override
  State<ReceiverScreen> createState() => _ReceiverScreenState();
}

class _ReceiverScreenState extends State<ReceiverScreen> {
  String _status = 'Waiting for sender...';
  bool _isReceiving = false;
  Transaction? _receivedTransaction;

  @override
  void initState() {
    super.initState();
    _startReceiving();
  }

  Future<void> _startReceiving() async {
    setState(() => _isReceiving = true);
    
    // Start advertising as BLE peripheral
    await BluetoothService().startAdvertising('user_upi_id'); // Replace with actual UPI
    
    // Listen for incoming data
    FlutterBluePlus.onCharacteristicWrite.listen((event) async {
      final charUuid = event.characteristic.uuid.toString();
      
      if (charUuid == AppConstants.otpCharUuid) {
        final otp = String.fromCharCodes(event.value);
        setState(() => _status = 'Received OTP: $otp');
        _receivedTransaction = (transaction: _receivedTransaction ?? Transaction())..otp = otp;
      }
      // Handle other characteristics similarly
      
      // When all data is received
      if (_receivedTransaction?.isComplete == true) {
        _processReceivedTransaction();
      }
    });
  }

  Future<void> _processReceivedTransaction() async {
    // Verify PIN before accepting
    final verified = await PinVerification.verifyPin(context);
    if (!verified) {
      setState(() => _status = 'Transaction rejected');
      return;
    }
    
    // Update local balance
    await WalletService.processTransaction(
      isSender: false,
      amount: _receivedTransaction!.amount,
      otp: _receivedTransaction!.otp,
      txId: _receivedTransaction!.id,
      otherPartyUpi: _receivedTransaction!.sender,
    );
    
    setState(() {
      _status = 'Received â‚¹${_receivedTransaction!.amount}';
      _isReceiving = false;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Receive Coins')),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            if (_isReceiving)
              const CircularProgressIndicator(),
            Text(_status),
            if (_receivedTransaction != null)
              ElevatedButton(
                onPressed: _processReceivedTransaction,
                child: const Text('Confirm Transaction'),
              ),
          ],
        ),
      ),
    );
  }
}
